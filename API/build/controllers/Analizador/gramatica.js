/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,39],$V2=[1,8],$V3=[1,20],$V4=[1,21],$V5=[1,23],$V6=[1,25],$V7=[1,27],$V8=[1,26],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,38],$Vf=[1,41],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,58],$Vs=[1,59],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,62],$VA=[1,64],$VB=[1,65],$VC=[2,5,7,8,14,28,29,30,38,43,45,46,48,50,51,54,56,58,59,61,73,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VD=[39,40,41,42,60,61,62,63,64,65,67,68,69,70,71,72,78],$VE=[2,94],$VF=[1,72],$VG=[1,70],$VH=[2,89],$VI=[2,90],$VJ=[2,69],$VK=[2,95],$VL=[1,80],$VM=[1,91],$VN=[1,92],$VO=[1,82],$VP=[1,83],$VQ=[1,85],$VR=[1,86],$VS=[1,87],$VT=[1,88],$VU=[1,89],$VV=[1,90],$VW=[1,93],$VX=[1,94],$VY=[1,95],$VZ=[1,96],$V_=[1,97],$V$=[1,98],$V01=[1,84],$V11=[1,117],$V21=[10,14,33,40],$V31=[10,11,30,34,39,40,41,42,49,57,60,61,62,63,64,65,67,68,69,70,71,72,78],$V41=[2,25],$V51=[1,139],$V61=[10,11,30,34,39,40,49,57,60,61,62,63,64,65,67,68,69,70,71,72,78],$V71=[10,11,30,34,39,40,49,57,67,68,69,70,71,72,78],$V81=[1,191],$V91=[10,30,57],$Va1=[10,11,30,34,39,40,49,57,60,61,67,68,69,70,71,72,78],$Vb1=[10,11,30,34,39,40,49,57,60,61,62,63,64,67,68,69,70,71,72,78],$Vc1=[10,11,30,34,39,40,49,57,67,68,69,70,78],$Vd1=[2,96],$Ve1=[1,225],$Vf1=[1,229],$Vg1=[10,57],$Vh1=[2,97],$Vi1=[1,270],$Vj1=[1,286],$Vk1=[30,48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PRINT":7,"PIZQ":8,"EX":9,"PDER":10,"PTCOMA":11,"DECLE":12,"ASIG":13,"NOMBRE":14,"PT":15,"ADD":16,"INCREMENTAR":17,"DECREMENTO":18,"INS_IF":19,"INS_TERNARIO":20,"INS_SWITCH":21,"INS_WHILE":22,"INS_FOR":23,"INS_DOWHILE":24,"FUNCION":25,"LLAMADA":26,"INS_RETURN":27,"BREAK":28,"CONTINUE":29,"LLDER":30,"INS_TIPO":31,"IGUAL":32,"CIZQ":33,"CDER":34,"NEW":35,"LLIZQ":36,"LISTA_EX":37,"LIST":38,"MENORQUE":39,"MAYORQUE":40,"INMAS":41,"INMENOS":42,"IF":43,"ELSE":44,"WHILE":45,"SWITCH":46,"INS_CASOS":47,"DEFAULT":48,"DOSPT":49,"CASE":50,"FOR":51,"ACTUALIZACION":52,"ASIGNACION":53,"DO":54,"PARAMETROS":55,"VOID":56,"COMA":57,"EXEC":58,"RETURN":59,"MAS":60,"MENOS":61,"POR":62,"DIV":63,"MODULO":64,"ELEVADO":65,"VALORES":66,"DIFERENTE":67,"IGUALDAD":68,"MAYORIGUAL":69,"MENORIGUAL":70,"AND":71,"OR":72,"NOT":73,"INS_CAST":74,"INS_NATIVAS":75,"INS_TOLOWER":76,"INS_TOUPPER":77,"INTERROGACION":78,"INT":79,"DOUBLE":80,"CHAR":81,"BOOLEAN":82,"STRING":83,"ENTERO":84,"DECIMAL":85,"CARACTER":86,"CADENA":87,"TRUE":88,"FALSE":89,"TOLOWER":90,"TOUPPER":91,"LENGTH":92,"TRUNCATE":93,"ROUND":94,"TYPEOF":95,"TOSTRING":96,"TOCHARARRAY":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PIZQ",10:"PDER",11:"PTCOMA",14:"NOMBRE",15:"PT",16:"ADD",28:"BREAK",29:"CONTINUE",30:"LLDER",32:"IGUAL",33:"CIZQ",34:"CDER",35:"NEW",36:"LLIZQ",38:"LIST",39:"MENORQUE",40:"MAYORQUE",41:"INMAS",42:"INMENOS",43:"IF",44:"ELSE",45:"WHILE",46:"SWITCH",48:"DEFAULT",49:"DOSPT",50:"CASE",51:"FOR",53:"ASIGNACION",54:"DO",56:"VOID",57:"COMA",58:"EXEC",59:"RETURN",60:"MAS",61:"MENOS",62:"POR",63:"DIV",64:"MODULO",65:"ELEVADO",67:"DIFERENTE",68:"IGUALDAD",69:"MAYORIGUAL",70:"MENORIGUAL",71:"AND",72:"OR",73:"NOT",78:"INTERROGACION",79:"INT",80:"DOUBLE",81:"CHAR",82:"BOOLEAN",83:"STRING",84:"ENTERO",85:"DECIMAL",86:"CARACTER",87:"CADENA",88:"TRUE",89:"FALSE",90:"TOLOWER",91:"TOUPPER",92:"LENGTH",93:"TRUNCATE",94:"ROUND",95:"TYPEOF",96:"TOSTRING",97:"TOCHARARRAY"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[6,5],[6,2],[6,2],[6,7],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[12,2],[12,4],[12,10],[12,8],[12,11],[12,7],[13,3],[13,8],[13,6],[17,2],[18,2],[19,7],[19,9],[19,11],[19,3],[22,7],[22,3],[21,10],[21,7],[21,9],[21,3],[47,5],[47,4],[23,10],[23,10],[23,3],[52,2],[52,2],[52,2],[24,9],[24,3],[25,7],[25,8],[25,8],[25,7],[25,3],[55,4],[55,2],[26,4],[26,3],[26,5],[26,4],[27,2],[27,3],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,3],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,4],[9,6],[20,5],[31,1],[31,1],[31,1],[31,1],[31,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[74,4],[37,3],[37,1],[76,4],[77,4],[75,4],[75,4],[75,4],[75,4],[75,4],[75,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
TRADUCTOR1.instrucciones = $$[$0-1]; TRADUCTOR2 = TRADUCTOR1; TRADUCTOR1 = new TRADUCTOR.default([]); return TRADUCTOR2;
break;
case 2:
TRADUCTOR1.newError("Sintactico", "SÃ­mbolo "+yytext+" no reconocido.", this._$.first_line, this._$.first_column);
break;
case 3: case 24:
console.log("error");
break;
case 4:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5:
this.$= []; this.$.push($$[$0]);
break;
case 6:
this.$ = new IMPRIMIR.default($$[$0-2],this._$.first_line, this._$.first_column);
break;
case 7: case 8: case 13: case 51: case 52: case 53:
this.$ = $$[$0-1];
break;
case 9:
this.$ = $$[$0-6];
break;
case 10: case 11:
this.$ = new indec.default($$[$0-1],this._$.first_line, this._$.first_column);
break;
case 12: case 14: case 15: case 16: case 17: case 18: case 20: case 69: case 78:
this.$ = $$[$0];
break;
case 19:
this.$ = ''; if($$[$0-1]!==''){this.$ = new LLAMADA.default(this._$.first_line, this._$.first_column, $$[$0-1]);}
break;
case 21:
this.$ = new BREAK.default(this._$.first_line, this._$.first_column);
break;
case 22:
this.$ = new CONTINUE.default(this._$.first_line, this._$.first_column);
break;
case 23:
this.$ = "fda"
break;
case 25:
this.$= new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]);
break;
case 26:
this.$= new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-2], $$[$0]);
break;
case 27: case 28: case 29: case 30: case 32: case 33: case 39: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 50: case 55: case 60: case 96: case 97: case 113: case 114:
this.$="";
break;
case 31:
this.$= new asignar_valor.default(this._$.first_line, this._$.first_column,$$[$0-2],$$[$0]);
break;
case 34:
this.$= new crementar.default(this._$.first_line, this._$.first_column,$$[$0-1],$$[$0]);
break;
case 35:
this.$=new crementar.default(this._$.first_line, this._$.first_column,$$[$0-1],$$[$0]);
break;
case 36:
this.$= new IF.default(this._$.first_line, this._$.first_column,$$[$0-4], $$[$0-1]);;
break;
case 37:
this.$= new IF.default(this._$.first_line, this._$.first_column,$$[$0-6], $$[$0-3], undefined, $$[$0]);
break;
case 38:
this.$= new IF.default(this._$.first_line, this._$.first_column,$$[$0-8], $$[$0-5], $$[$0-1]);
break;
case 40:
this.$= new WHILE.default(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-1]);
break;
case 48: case 49:
this.$= new FOR.default(this._$.first_line, this._$.first_column, $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 54:
new DO.default(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0-6]);
break;
case 56:
this.$="";TRADUCTOR1.FUNCTIONS.push(new FUNCION.default(this._$.first_line, this._$.first_column, $$[$0-6], $$[$0-5], $$[$0-1], undefined));
break;
case 57:
this.$="";TRADUCTOR1.FUNCTIONS.push(new FUNCION.default(this._$.first_line, this._$.first_column, $$[$0-7], $$[$0-6], $$[$0-1], $$[$0-4]));
break;
case 58:
this.$="";TRADUCTOR1.FUNCTIONS.push(new FUNCION.default(this._$.first_line, this._$.first_column, new TIPO.default(TIPO.tipos.ERROR), $$[$0-6], $$[$0-2], undefined));
break;
case 59:
this.$="";TRADUCTOR1.FUNCTIONS.push(new FUNCION.default(this._$.first_line, this._$.first_column, new TIPO.default(TIPO.tipos.ERROR), $$[$0-5], $$[$0-1], undefined));
break;
case 61:
this.$= $$[$0-3]; $$[$0-3].push(new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]));
break;
case 62:
this.$=[]; this.$.push(new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]));
break;
case 63:
this.$=new FUNCION_E.default(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]);
break;
case 64:
this.$=new FUNCION_E.default(this._$.first_line, this._$.first_column, $$[$0-2]);
break;
case 65:
this.$=""; TRADUCTOR1.EXEC.push(new LLAMADA.default(this._$.first_line, this._$.first_column, new FUNCION_E.default(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1])));
break;
case 66:
this.$=""; TRADUCTOR1.EXEC.push(new LLAMADA.default(this._$.first_line, this._$.first_column, new FUNCION_E.default(this._$.first_line, this._$.first_column, $$[$0-2])));
break;
case 67:
this.$ = new RETURN.default(this._$.first_line, this._$.first_column, undefined);
break;
case 68:
this.$ = new RETURN.default(this._$.first_line, this._$.first_column, $$[$0-1]);
break;
case 70: case 71: case 72: case 73: case 74: case 75:
this.$= new aritmetica.default(this._$.first_line, this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 76:
this.$= new aritmetica.default(this._$.first_line, this._$.first_column,$$[$0],$$[$0-1]);
break;
case 77:
this.$=$$[$0-1];
break;
case 79: case 80: case 81: case 82: case 83: case 84:
this.$= new relacional.default(this._$.first_line, this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 85: case 86:
this.$= new logico.default(this._$.first_line, this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 87:
this.$= new logico.default(this._$.first_line, this._$.first_column,$$[$0],$$[$0-1]);
break;
case 88:
this.$= $$[$0];
break;
case 89: case 90: case 91: case 92: case 93: case 95:
this.$=$$[$0];
break;
case 94:
this.$= new VARIABLE.default($$[$0],this._$.first_line, this._$.first_column);
break;
case 98:
this.$ = new ternario.default(this._$.first_line, this._$.first_column,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 99:
this.$ = new TIPO.default(TIPO.tipos.ENTERO);
break;
case 100:
this.$ = new TIPO.default(TIPO.tipos.DECIMAL);
break;
case 101:
this.$ = new TIPO.default(TIPO.tipos.CARACTER);
break;
case 102:
this.$ = new TIPO.default(TIPO.tipos.BOOLEANO);
break;
case 103:
this.$ = new TIPO.default(TIPO.tipos.CADENA);
break;
case 104:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.ENTERO),$$[$0],this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.DECIMAL),$$[$0],this._$.first_line, this._$.first_column);
break;
case 106:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.CARACTER),$$[$0],this._$.first_line, this._$.first_column);
break;
case 107:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.CADENA),$$[$0],this._$.first_line, this._$.first_column);
break;
case 108: case 109:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.BOOLEANO),$$[$0],this._$.first_line, this._$.first_column);
break;
case 110:
this.$= new casteo.default(this._$.first_line, this._$.first_column,$$[$0-2],$$[$0]);
break;
case 111:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 112:
this.$=[]; this.$.push($$[$0]);
break;
case 115: case 116: case 117: case 118: case 119: case 120:
this.$= new nativa.default(this._$.first_line, this._$.first_column,$$[$0-3],$$[$0-1]);
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{1:[3]},{2:$Vz,5:[1,60],6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{1:[2,3],5:[1,63],11:$VA,30:$VB},o($VC,[2,5]),{8:[1,66]},{11:[1,67]},{11:[1,68]},o($VD,$VE,{8:$VF,15:[1,69],32:$VG,33:[1,71]}),o($VD,$VH,{11:[1,73]}),o($VD,$VI,{11:[1,74]}),o($VC,[2,12]),o($VD,$VJ,{11:[1,75]}),o($VC,[2,14]),o($VC,[2,15]),o($VC,[2,16]),o($VC,[2,17]),o($VC,[2,18]),o($VD,$VK,{11:[1,76]}),o($VC,[2,20]),{11:[1,77]},{11:[1,78]},{14:[1,79],33:$VL},{39:[1,81]},{39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{2:[1,100],8:[1,99]},{2:[1,102],8:[1,101]},{2:[1,104],8:[1,103]},{2:[1,106],8:[1,105]},{2:[1,108],36:[1,107]},{2:[1,110],14:[1,109]},{14:[1,111]},{8:$V1,9:113,11:[1,112],14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V21,[2,99]),o($V21,[2,100]),o($V21,[2,101]),o($V21,[2,102]),o($V21,[2,103]),{8:$V1,9:119,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:120,14:$V11,17:115,18:116,20:114,26:118,31:121,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V31,[2,78]),{8:$V1,9:122,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V31,[2,88]),o($V31,[2,91]),o($V31,[2,92]),o($V31,[2,93]),o($V31,[2,104]),o($V31,[2,105]),o($V31,[2,106]),o($V31,[2,107]),o($V31,[2,108]),o($V31,[2,109]),{8:[1,123]},{8:[1,124]},{8:[1,125]},{8:[1,126]},{8:[1,127]},{8:[1,128]},{8:[1,129]},{8:[1,130]},{1:[2,1]},o($VC,[2,4]),{11:$VA,30:$VB},{1:[2,2]},o($VC,[2,23]),o($VC,[2,24]),{8:$V1,9:131,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,7]),o($VC,[2,8]),{16:[1,132]},{8:$V1,9:133,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:135,14:$V11,17:115,18:116,20:114,26:118,33:[1,134],58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:138,10:[1,137],14:$V11,17:115,18:116,20:114,26:118,37:136,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,10]),o($VC,[2,11]),o($VC,[2,13]),o($VC,[2,19]),o($VC,[2,21]),o($VC,[2,22]),{8:[1,140],11:$V41,32:$V51},{34:[1,141]},{31:142,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},o($V31,[2,34]),o($V31,[2,35]),{8:$V1,9:143,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:144,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:145,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:146,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:147,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:148,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:149,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:150,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:151,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:152,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:153,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:154,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:155,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:156,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:157,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:158,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{30:[1,159]},{8:$V1,9:160,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{10:[1,161]},{8:$V1,9:162,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{30:[1,163]},{12:164,13:165,14:[1,167],31:166,38:$V5,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},{30:[1,168]},{2:$Vz,4:169,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{11:[1,170]},{8:[1,171]},{30:[1,172]},{8:[1,173]},o($VC,[2,67]),{11:[1,174],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($V31,$VJ),o($V31,$VH),o($V31,$VI),o($V31,$VE,{8:$VF,33:[1,175]}),o($V31,$VK),o($V61,[2,76],{41:$VO,42:$VP}),{10:[1,176],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,177]},o($V71,[2,87],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV}),{8:$V1,9:178,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:179,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:180,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:181,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:182,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:183,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:184,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:185,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{10:[1,186],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{8:[1,187]},{11:[2,31],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{8:$V1,9:188,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{34:[1,189],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,190],57:$V81},o($V31,[2,64]),o($V91,[2,112],{39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01}),{8:$V1,9:192,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{10:[1,193],31:195,55:194,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},{14:[1,196]},{40:[1,197]},{39:$VM,40:$VN,41:$VO,42:$VP,49:[1,198],60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($Va1,[2,70],{41:$VO,42:$VP,62:$VS,63:$VT,64:$VU,65:$VV}),o($Va1,[2,71],{41:$VO,42:$VP,62:$VS,63:$VT,64:$VU,65:$VV}),o($Vb1,[2,72],{41:$VO,42:$VP,65:$VV}),o($Vb1,[2,73],{41:$VO,42:$VP,65:$VV}),o($Vb1,[2,74],{41:$VO,42:$VP,65:$VV}),o($V61,[2,75],{41:$VO,42:$VP}),o($Vc1,[2,79],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($Vc1,[2,80],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($Vc1,[2,81],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($Vc1,[2,82],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($Vc1,[2,83],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($Vc1,[2,84],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_,72:$V$}),o($V71,[2,85],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV}),o([10,11,30,34,39,40,49,57,67,68,69,70,72,78],[2,86],{41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,71:$V_}),{10:[1,199],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,39]),{10:[1,200],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,45]),{10:[1,201],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,41]),{11:[1,202]},{11:[1,203]},{14:[1,204],33:$VL},{32:$VG,33:[1,205]},o($VC,[2,50]),{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,206],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,55]),{10:[1,208],31:195,55:207,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},o($VC,[2,60]),{8:$V1,9:138,10:[1,210],14:$V11,17:115,18:116,20:114,26:118,37:209,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,68]),{8:$V1,9:211,14:$V11,17:115,18:116,20:114,26:118,33:[1,212],58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V31,[2,77]),{8:$V1,9:213,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{10:[1,214],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,215],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,216],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,217],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,218],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,219],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,220],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{10:[1,221],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{11:[1,222]},{8:$V1,9:223,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{34:[1,224],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VD,$Vd1,{32:$Ve1}),o($V31,[2,63]),{8:$V1,9:226,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{11:[2,26],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{36:[1,227]},{10:[1,228],57:$Vf1},{14:[1,230]},{32:[1,231]},{14:[1,232]},{8:$V1,9:233,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{36:[1,234]},{36:[1,235]},{36:[1,236]},{8:$V1,9:237,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:238,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{11:$V41,32:$V51},{8:$V1,9:240,14:$V11,17:115,18:116,20:114,26:118,33:[1,239],58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{45:[1,241]},{10:[1,242],57:$Vf1},{36:[1,243]},{10:[1,244],57:$V81},o($V31,[2,66]),{34:[1,245],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{8:$V1,9:246,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V61,[2,110],{41:$VO,42:$VP}),o($V31,[2,115]),o($V31,[2,116]),o($V31,[2,117]),o($V31,[2,118]),o($V31,[2,119]),o($V31,[2,120]),o($V31,[2,113]),o($V31,[2,114]),o($VC,[2,6]),{10:[1,247],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{34:[1,248]},{8:$V1,9:249,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V91,[2,111],{39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01}),{2:$Vz,4:250,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{36:[1,251]},{31:252,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},o($Vg1,[2,62]),{35:[1,253],36:[1,254]},{32:[1,255]},o([10,11,30,34,49,57,78],[2,98],{39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$}),{2:$Vz,4:256,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{47:257,48:[1,258],50:[1,259]},{2:$Vz,4:260,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{11:[1,261],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{11:[1,262],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{8:$V1,9:263,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{34:[1,264],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{8:[1,265]},{36:[1,266]},{2:$Vz,4:267,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V31,[2,65]),o($V31,$Vd1),{34:[1,268],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{11:[1,269]},o($VD,$Vh1,{32:$Vi1}),{11:[2,33],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,271],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:272,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{14:[1,273]},{31:274,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},{8:$V1,9:138,14:$V11,17:115,18:116,20:114,26:118,37:275,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:277,14:$V11,17:115,18:116,20:114,26:118,35:[1,276],58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,278],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{30:[1,280],48:[1,279],50:[1,281]},{49:[1,282]},{8:$V1,9:283,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,284],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:24,14:$V11,17:287,18:288,20:114,26:118,52:285,53:$Vj1,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{8:$V1,9:24,14:$V11,17:287,18:288,20:114,26:118,52:289,53:$Vj1,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{34:[1,290],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{32:$Ve1},{8:$V1,9:291,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:292,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,293],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{34:[1,294]},o($VC,[2,9]),{8:$V1,9:295,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,56]),{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,296],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($Vg1,[2,61]),{33:[1,297]},{30:[1,298],57:$V81},{38:[1,299]},{11:[2,30],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,36],{44:[1,300]}),{49:[1,301]},o($VC,[2,43]),{8:$V1,9:302,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:303,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,49:[1,304],60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,40]),{36:[1,305]},{10:[1,306]},o($VD,$VH,{10:[1,307]}),o($VD,$VI,{10:[1,308]}),{36:[1,309]},{34:[1,310]},{10:[1,311],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,312],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,59]),o($V31,$Vh1),{11:[2,32],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},o($VC,[2,57]),{8:$V1,9:313,14:$V11,17:115,18:116,20:114,26:118,58:$Vc,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{11:[2,28]},{39:[1,314]},{19:315,36:[1,316],43:$V6},{2:$Vz,4:317,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,49:[1,318],60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,319],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:320,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:321,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{36:[2,51]},{36:[2,52]},{36:[2,53]},{2:$Vz,4:322,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{32:$Vi1},{11:[1,323]},o($VC,[2,58]),{34:[1,324],39:$VM,40:$VN,41:$VO,42:$VP,60:$VQ,61:$VR,62:$VS,63:$VT,64:$VU,65:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,71:$V_,72:$V$,78:$V01},{31:325,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk},o($VC,[2,37]),{2:$Vz,4:326,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,327],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,4:328,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,44]),o($Vk1,[2,47],{12:6,13:7,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,31:22,9:24,66:40,74:42,75:43,76:44,77:45,6:61,2:$Vz,7:$V0,8:$V1,14:$V2,28:$V3,29:$V4,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,329],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,330],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,54]),{11:[2,27]},{40:[1,331]},{2:$Vz,6:61,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V3,29:$V4,30:[1,332],31:22,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,66:40,73:$Vf,74:42,75:43,76:44,77:45,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VC,[2,42]),o($Vk1,[2,46],{12:6,13:7,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,31:22,9:24,66:40,74:42,75:43,76:44,77:45,6:61,2:$Vz,7:$V0,8:$V1,14:$V2,28:$V3,29:$V4,38:$V5,43:$V6,45:$V7,46:$V8,51:$V9,54:$Va,56:$Vb,58:$Vc,59:$Vd,61:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VC,[2,48]),o($VC,[2,49]),{11:[2,29]},o($VC,[2,38])],
defaultActions: {60:[2,1],63:[2,2],298:[2,28],306:[2,51],307:[2,52],308:[2,53],324:[2,27],331:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TRADUCTOR  = require('./tablaSimbolo/TRADUCTOR');
    const Excepcion = require('./exceptions/EXCEPTION');
    const PRIMITIVO = require('./expresiones/PRIMITIVO');
    const VARIABLE = require('./expresiones/VARIABLE');
    const FUNCION_E = require('./expresiones/FUNCION');
    const IMPRIMIR  = require('./instrucciones/IMPRIMIR');
    const IF  = require('./instrucciones/IF');
    const FOR  = require('./instrucciones/FOR');
    const WHILE  = require('./instrucciones/WHILE');
    const DO  = require('./instrucciones/DO');
    const FUNCION  = require('./instrucciones/FUNCION');
    const LLAMADA  = require('./instrucciones/LLAMAR');
    const CONTINUE  = require('./instrucciones/CONTINUE');
    const BREAK  = require('./instrucciones/BREAK');
    const RETURN  = require('./instrucciones/RETURN');
    const DECLARAR_VAR  = require('./instrucciones/VARIABLE');
    const TIPO = require('./tablaSimbolo/TIPO');
    const aritmetica = require('./expresiones/ARITMETICA');
    const TIPO_INSTRUCCION = require('./tablaSimbolo/TIPO_INSTRUCCION');
    const relacional = require('./expresiones/RELACIONALES');
    const logico = require('./expresiones/LOGICOS');
    const ternario = require('./expresiones/TERNARIO');
    const casteo = require('./expresiones/CAST');
    const crementar = require('./expresiones/IN_DECREMENTAR');
    const asignar_valor = require('./instrucciones/ASIGNACION');
    const indec = require('./instrucciones/IN_DECRE');
    const nativa = require('./expresiones/NATIVA');

    let Texto="";
    let TRADUCTOR1 = new TRADUCTOR.default([]);
    let TRADUCTOR2 = new TRADUCTOR.default([]);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:$$="";
break;
case 1:$$="";
break;
case 2:$$="";
break;
case 3:$$="";
break;
case 4:$$="";
break;
case 5:Texto=""; this.begin("CARACTER");
break;
case 6:yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1); this.popState(); return 86;
break;
case 7:yy_.yytext = '\n'; this.popState(); return 86;
break;
case 8:yy_.yytext = "\t"; this.popState(); return 86;
break;
case 9:yy_.yytext = "\r"; this.popState(); return 86;
break;
case 10:yy_.yytext = "\""; this.popState(); return 86;
break;
case 11:yy_.yytext = "'"; this.popState(); return 86;
break;
case 12:yy_.yytext = "\\"; this.popState(); return 86;
break;
case 13:this.popState(); return 'CARACTER_ERROR';
break;
case 14:Texto=""; this.begin("CADENA");
break;
case 15:Texto+=yy_.yytext;
break;
case 16:Texto+='\n';
break;
case 17:Texto+="\t";
break;
case 18:Texto+="\r";
break;
case 19:Texto+="\"";
break;
case 20:Texto+="\'";
break;
case 21:Texto+="\\";
break;
case 22:yy_.yytext = Texto; this.popState(); return 87;
break;
case 23:return "INMAS";
break;
case 24:return "INMENOS";
break;
case 25:return "INTERROGACION";
break;
case 26:return "DIFERENTE";
break;
case 27:return "IGUALDAD";
break;
case 28:return "MAYORIGUAL";
break;
case 29:return "MENORIGUAL"; 
break;
case 30:return "MENORQUE";
break;
case 31:return "MAYORQUE";
break;
case 32:return "IGUAL";
break;
case 33:return "MAS";
break;
case 34:return "MENOS";
break;
case 35:return "POR";
break;
case 36:return "DIV";
break;
case 37:return "MODULO";
break;
case 38:return "ELEVADO";
break;
case 39:return "AND";
break;
case 40:return "OR";
break;
case 41:return "NOT";
break;
case 42:return "INT";
break;
case 43:return "DOUBLE";
break;
case 44:return "BOOLEAN";
break;
case 45:return "CHAR";
break;
case 46:return "STRING";
break;
case 47:return "TRUE";
break;
case 48:return "FALSE";
break;
case 49:return "PRINT";
break;
case 50:return "IF";
break;
case 51:return "ELSE";
break;
case 52:return "FOR";
break;
case 53:return "WHILE";
break;
case 54:return "DO";
break;
case 55:return "SWITCH";
break;
case 56:return "NEW";
break;
case 57:return "RETURN";
break;
case 58:return "CONTINUE";
break;
case 59:return "BREAK";
break;
case 60:return "LIST";
break;
case 61:return "ADD";
break;
case 62:return "CASE";
break;
case 63:return "DEFAULT";
break;
case 64:return "VOID";
break;
case 65:return "TOLOWER";
break;
case 66:return "TOUPPER";
break;
case 67:return "LENGTH";
break;
case 68:return "TRUNCATE";
break;
case 69:return "ROUND";
break;
case 70:return "TYPEOF";
break;
case 71:return "TOSTRING";
break;
case 72:return "TOCHARARRAY";
break;
case 73:return "EXEC";
break;
case 74:return "PTCOMA";
break;
case 75:return "DOSPT"
break;
case 76:return "PT";
break;
case 77:return "COMA";
break;
case 78:return "PIZQ";
break;
case 79:return "PDER";
break;
case 80:return "CIZQ";
break;
case 81:return "CDER";
break;
case 82:return "LLIZQ";
break;
case 83:return "LLDER";
break;
case 84:return "NOMBRE";
break;
case 85:return "DECIMAL";
break;
case 86:return "ENTERO";
break;
case 87:return 5;
break;
case 88:
    TRADUCTOR1.newError("LEXICO", "SÃ­mbolo "+yy_.yytext+" no reconocido.", yy_.yylloc.first_line, yy_.yylloc.first_column); 

break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:['])/i,/^(?:[^'\\]')/i,/^(?:\\n')/i,/^(?:\\t')/i,/^(?:\\r')/i,/^(?:\\"')/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:[^'\\]*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\?)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOLEAN\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:PRINT\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:FOR\b)/i,/^(?:WHILE\b)/i,/^(?:DO\b)/i,/^(?:SWITCH\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:BREAK\b)/i,/^(?:LIST\b)/i,/^(?:ADD\b)/i,/^(?:CASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:VOID\b)/i,/^(?:toLOWER\b)/i,/^(?:toUPPER\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Exec\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[A-Za-z]([A-Za-z]|[0-9]|[_])*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CARACTER":{"rules":[6,7,8,9,10,11,12,13],"inclusive":false},"CADENA":{"rules":[15,16,17,18,19,20,21,22],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}