/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,39],$V2=[1,8],$V3=[1,12],$V4=[1,20],$V5=[1,21],$V6=[1,23],$V7=[1,25],$V8=[1,27],$V9=[1,26],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,38],$Vg=[1,41],$Vh=[1,44],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,57],$Vw=[1,59],$Vx=[1,60],$Vy=[2,5,7,8,14,20,28,29,30,38,43,48,49,51,52,53,56,58,60,61,63,75,77,80,81,82,83,84,85,86,87,88,89,90,92,93],$Vz=[39,40,41,42,46,62,63,64,65,66,67,69,70,71,72,73,74],$VA=[2,97],$VB=[1,67],$VC=[1,65],$VD=[2,92],$VE=[2,93],$VF=[2,98],$VG=[1,75],$VH=[1,85],$VI=[1,86],$VJ=[1,77],$VK=[1,78],$VL=[1,93],$VM=[1,79],$VN=[1,80],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[1,84],$VS=[1,87],$VT=[1,88],$VU=[1,89],$VV=[1,90],$VW=[1,91],$VX=[1,92],$VY=[1,109],$VZ=[10,14,33,40],$V_=[10,11,34,39,40,41,42,46,47,62,63,64,65,66,67,69,70,71,72,73,74],$V$=[2,25],$V01=[1,126],$V11=[10,11,34,39,40,46,47,62,63,64,65,66,67,69,70,71,72,73,74],$V21=[10,11,34,46,47,73,74],$V31=[10,11,34,39,40,46,47,62,63,69,70,71,72,73,74],$V41=[10,11,34,39,40,46,47,62,63,64,65,66,69,70,71,72,73,74],$V51=[10,11,34,39,40,46,47,69,70,71,72,73,74],$V61=[2,78],$V71=[1,199],$V81=[1,202],$V91=[10,59],$Va1=[2,79],$Vb1=[1,243],$Vc1=[1,259],$Vd1=[30,51,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PRINT":7,"PIZQ":8,"EX":9,"PDER":10,"PTCOMA":11,"DECLE":12,"ASIG":13,"NOMBRE":14,"PT":15,"ADD":16,"INCREMENTAR":17,"DECREMENTO":18,"INS_IF":19,"INS_INTERROGACION":20,"INS_SWITCH":21,"INS_WHILE":22,"INS_FOR":23,"INS_DOWHILE":24,"FUNCION":25,"LLAMADA":26,"INS_RETURN":27,"BREAK":28,"CONTINUE":29,"LLDER":30,"INS_TIPO":31,"IGUAL":32,"CIZQ":33,"CDER":34,"NEW":35,"LLIZQ":36,"LISTA_EX":37,"LIST":38,"MENORQUE":39,"MAYORQUE":40,"INMAS":41,"INMENOS":42,"IF":43,"ELSE":44,"INS_TERNARIO":45,"INTERROGACION":46,"DOSPT":47,"WHILE":48,"SWITCH":49,"INS_CASOS":50,"DEFAULT":51,"CASE":52,"FOR":53,"ACTUALIZACION":54,"ASIGNACION":55,"DO":56,"PARAMETROS":57,"VOID":58,"COMA":59,"EXEC":60,"RETURN":61,"MAS":62,"MENOS":63,"POR":64,"DIV":65,"MODULO":66,"ELEVADO":67,"VALORES":68,"DIFERENTE":69,"IGUALDAD":70,"MAYORIGUAL":71,"MENORIGUAL":72,"AND":73,"OR":74,"NOT":75,"INS_CAST":76,"NATIVAS":77,"INS_TOLOWER":78,"INS_TOUPPER":79,"INT":80,"DOUBLE":81,"CHAR":82,"BOOLEAN":83,"STRING":84,"ENTERO":85,"DECIMAL":86,"CARACTER":87,"CADENA":88,"TRUE":89,"FALSE":90,"LISTA_EXP":91,"TOLOWER":92,"TOUPPER":93,"INS_NATIVAS":94,"LENGTH":95,"TRUNCATE":96,"ROUND":97,"TYPEOF":98,"TOSTRING":99,"TOCHARARRAY":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PIZQ",10:"PDER",11:"PTCOMA",14:"NOMBRE",15:"PT",16:"ADD",20:"INS_INTERROGACION",28:"BREAK",29:"CONTINUE",30:"LLDER",32:"IGUAL",33:"CIZQ",34:"CDER",35:"NEW",36:"LLIZQ",37:"LISTA_EX",38:"LIST",39:"MENORQUE",40:"MAYORQUE",41:"INMAS",42:"INMENOS",43:"IF",44:"ELSE",46:"INTERROGACION",47:"DOSPT",48:"WHILE",49:"SWITCH",51:"DEFAULT",52:"CASE",53:"FOR",55:"ASIGNACION",56:"DO",58:"VOID",59:"COMA",60:"EXEC",61:"RETURN",62:"MAS",63:"MENOS",64:"POR",65:"DIV",66:"MODULO",67:"ELEVADO",69:"DIFERENTE",70:"IGUALDAD",71:"MAYORIGUAL",72:"MENORIGUAL",73:"AND",74:"OR",75:"NOT",77:"NATIVAS",80:"INT",81:"DOUBLE",82:"CHAR",83:"BOOLEAN",84:"STRING",85:"ENTERO",86:"DECIMAL",87:"CARACTER",88:"CADENA",89:"TRUE",90:"FALSE",92:"TOLOWER",93:"TOUPPER",95:"LENGTH",96:"TRUNCATE",97:"ROUND",98:"TYPEOF",99:"TOSTRING",100:"TOCHARARRAY"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[6,5],[6,2],[6,2],[6,7],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[12,2],[12,4],[12,10],[12,8],[12,11],[12,7],[13,3],[13,8],[13,6],[17,2],[18,2],[19,7],[19,9],[19,11],[19,3],[45,5],[22,7],[22,3],[21,10],[21,7],[21,9],[21,3],[50,5],[50,4],[23,10],[23,10],[23,3],[54,2],[54,2],[54,2],[24,9],[24,3],[25,7],[25,8],[25,8],[25,7],[25,3],[57,4],[57,2],[26,4],[26,3],[26,5],[26,4],[27,2],[27,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,3],[9,4],[9,6],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[31,1],[31,1],[31,1],[31,1],[31,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[76,4],[91,3],[91,1],[78,4],[79,4],[94,4],[94,4],[94,4],[94,4],[94,4],[94,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
TRADUCTOR1.instrucciones = $$[$0-1]; TRADUCTOR2 = TRADUCTOR1; TRADUCTOR1 = new TRADUCTOR.default([]); return TRADUCTOR2;
break;
case 2: case 3: case 24:
console.log("error");
break;
case 4:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5:
this.$= []; this.$.push($$[$0]);
break;
case 6:
this.$ = new IMPRIMIR.default($$[$0-2],this._$.first_line, this._$.first_column);
break;
case 7: case 8: case 10: case 11: case 13: case 19: case 21: case 22: case 52: case 53: case 54: case 68:
this.$ = $$[$0-1]
break;
case 9:
this.$ = $$[$0-6]
break;
case 12: case 14: case 15: case 16: case 17: case 18: case 20:
this.$ = $$[$0]
break;
case 23:
this.$ = ""
break;
case 25:
this.$= new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]);
break;
case 26:
this.$= new DECLARAR_VAR.default(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-2], $$[$0]);
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 98: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120:
this.$="";
break;
case 69:
this.$ = $$[$0-2]
break;
case 80:
this.$ = $$[$0];
break;
case 97:
this.$= new VARIABLE.default($$[$0]);
break;
case 99:
this.$ = new TIPO.default(TIPO.tipos.ENTERO);
break;
case 100:
this.$ = new TIPO.default(TIPO.tipos.DECIMAL);
break;
case 101:
this.$ = new TIPO.default(TIPO.tipos.CARACTER);
break;
case 102:
this.$ = new TIPO.default(TIPO.tipos.BOOLEANO);
break;
case 103:
this.$ = new TIPO.default(TIPO.tipos.CADENA);
break;
case 104:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.ENTERO),$$[$0],this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.DECIMAL),$$[$0],this._$.first_line, this._$.first_column);
break;
case 106:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.CARACTER),$$[$0],this._$.first_line, this._$.first_column);
break;
case 107:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.CADENA),$$[$0],this._$.first_line, this._$.first_column);
break;
case 108: case 109:
this.$ = new PRIMITIVO.default(new TIPO.default(TIPO.tipos.BOOLEANO),$$[$0],this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{1:[3]},{2:$Vv,5:[1,55],6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{1:[2,3],5:[1,58],11:$Vw,30:$Vx},o($Vy,[2,5]),{8:[1,61]},{11:[1,62]},{11:[1,63]},o($Vz,$VA,{8:$VB,15:[1,64],32:$VC,33:[1,66]}),o($Vz,$VD,{11:[1,68]}),o($Vz,$VE,{11:[1,69]}),o($Vy,[2,12]),{11:[1,70]},o($Vy,[2,14]),o($Vy,[2,15]),o($Vy,[2,16]),o($Vy,[2,17]),o($Vy,[2,18]),o($Vz,$VF,{11:[1,71]}),o($Vy,[2,20]),{11:[1,72]},{11:[1,73]},{14:[1,74],33:$VG},{39:[1,76]},{39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{2:[1,95],8:[1,94]},{2:[1,97],8:[1,96]},{2:[1,99],8:[1,98]},{2:[1,101],8:[1,100]},{2:[1,103],36:[1,102]},{2:[1,105],14:[1,104]},{14:[1,106]},{8:$V1,9:108,11:[1,107],14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,103]),{8:$V1,9:113,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:114,14:$VY,17:110,18:111,26:112,31:115,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V_,[2,80]),{8:$V1,9:116,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V_,[2,90]),o($V_,[2,91]),o($V_,[2,94]),o($V_,[2,95]),o($V_,[2,96]),o($V_,[2,104]),o($V_,[2,105]),o($V_,[2,106]),o($V_,[2,107]),o($V_,[2,108]),o($V_,[2,109]),{8:[1,117]},{8:[1,118]},{1:[2,1]},o($Vy,[2,4]),{11:$Vw,30:$Vx},{1:[2,2]},o($Vy,[2,23]),o($Vy,[2,24]),{8:$V1,9:119,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,7]),o($Vy,[2,8]),{16:[1,120]},{8:$V1,9:121,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:123,14:$VY,17:110,18:111,26:112,33:[1,122],45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{10:[1,125],37:[1,124]},o($Vy,[2,10]),o($Vy,[2,11]),o($Vy,[2,13]),o($Vy,[2,19]),o($Vy,[2,21]),o($Vy,[2,22]),{8:[1,127],11:$V$,32:$V01},{34:[1,128]},{31:129,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},o($V_,[2,34]),o($V_,[2,35]),{8:$V1,9:130,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:131,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:132,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:133,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:134,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:135,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:136,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:137,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:138,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:139,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:140,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:141,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:142,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:143,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:144,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:145,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{30:[1,146]},{8:$V1,9:147,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{10:[1,148]},{8:$V1,9:149,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{30:[1,150]},{12:151,13:152,14:[1,154],31:153,38:$V6,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},{30:[1,155]},{2:$Vv,4:156,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{11:[1,157]},{8:[1,158]},{30:[1,159]},{8:[1,160]},o($Vy,[2,68]),{11:[1,161],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($V_,$VA,{8:$VB,33:[1,162]}),o($V_,$VD),o($V_,$VE),o($V_,$VF),o($V11,[2,76],{41:$VJ,42:$VK}),{10:[1,163],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{10:[1,164]},o($V21,[2,89],{39:$VH,40:$VI,41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV}),{8:$V1,9:165,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:166,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{10:[1,167],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{8:[1,168]},{11:[2,31],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{8:$V1,9:169,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{34:[1,170],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{10:[1,171]},o($V_,[2,65]),{8:$V1,9:172,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{10:[1,173],31:175,57:174,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},{14:[1,176]},{40:[1,177]},o($V31,[2,70],{41:$VJ,42:$VK,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V31,[2,71],{41:$VJ,42:$VK,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V41,[2,72],{41:$VJ,42:$VK,67:$VR}),o($V41,[2,73],{41:$VJ,42:$VK,67:$VR}),o($V41,[2,74],{41:$VJ,42:$VK,67:$VR}),o($V11,[2,75],{41:$VJ,42:$VK}),o($V51,[2,81],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V51,[2,82],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V51,[2,83],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V51,[2,84],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V51,[2,85],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V51,[2,86],{41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($V21,[2,87],{39:$VH,40:$VI,41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV}),o([10,11,34,46,47,74],[2,88],{39:$VH,40:$VI,41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW}),{39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,47:[1,178],62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{10:[1,179],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,39]),{10:[1,180],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,46]),{10:[1,181],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,42]),{11:[1,182]},{11:[1,183]},{14:[1,184],33:$VG},{32:$VC,33:[1,185]},o($Vy,[2,51]),{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,186],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,56]),{10:[1,188],31:175,57:187,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},o($Vy,[2,61]),{10:[1,190],37:[1,189]},o($Vy,[2,69]),{8:$V1,9:191,14:$VY,17:110,18:111,26:112,33:[1,192],45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V_,[2,77]),{8:$V1,9:193,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{10:[1,194],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{10:[1,195],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{11:[1,196]},{8:$V1,9:197,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{34:[1,198],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vz,$V61,{32:$V71}),o($V_,[2,64]),{11:[2,26],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{36:[1,200]},{10:[1,201],59:$V81},{14:[1,203]},{32:[1,204]},{14:[1,205]},{8:$V1,9:206,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{36:[1,207]},{36:[1,208]},{36:[1,209]},{8:$V1,9:210,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:211,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{11:$V$,32:$V01},{8:$V1,9:213,14:$VY,17:110,18:111,26:112,33:[1,212],45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{48:[1,214]},{10:[1,215],59:$V81},{36:[1,216]},{10:[1,217]},o($V_,[2,67]),{34:[1,218],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{8:$V1,9:219,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V11,[2,110],{41:$VJ,42:$VK}),o($V_,[2,113]),o($V_,[2,114]),o($Vy,[2,6]),{10:[1,220],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{34:[1,221]},{8:$V1,9:222,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:223,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{36:[1,224]},{31:225,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},o($V91,[2,63]),{35:[1,226],36:[1,227]},{32:[1,228]},o([10,11,34,46,47],[2,40],{39:$VH,40:$VI,41:$VJ,42:$VK,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX}),{2:$Vv,4:229,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{50:230,51:[1,231],52:[1,232]},{2:$Vv,4:233,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{11:[1,234],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{11:[1,235],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{8:$V1,9:236,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{34:[1,237],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{8:[1,238]},{36:[1,239]},{2:$Vv,4:240,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V_,[2,66]),o($V_,$V61),{34:[1,241],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{11:[1,242]},o($Vz,$Va1,{32:$Vb1}),{11:[2,33],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,244],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:245,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{14:[1,246]},{31:247,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},{37:[1,248]},{8:$V1,9:250,14:$VY,17:110,18:111,26:112,35:[1,249],45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,251],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{30:[1,253],51:[1,252],52:[1,254]},{47:[1,255]},{8:$V1,9:256,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,257],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:24,14:$VY,17:260,18:261,26:112,45:43,54:258,55:$Vc1,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{8:$V1,9:24,14:$VY,17:260,18:261,26:112,45:43,54:262,55:$Vc1,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{34:[1,263],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{32:$V71},{8:$V1,9:264,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:265,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,266],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{34:[1,267]},o($Vy,[2,9]),{8:$V1,9:268,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,57]),{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,269],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($V91,[2,62]),{33:[1,270]},{30:[1,271]},{38:[1,272]},{11:[2,30],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,36],{44:[1,273]}),{47:[1,274]},o($Vy,[2,44]),{8:$V1,9:275,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:276,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,47:[1,277],62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,41]),{36:[1,278]},{10:[1,279]},o($Vz,$VD,{10:[1,280]}),o($Vz,$VE,{10:[1,281]}),{36:[1,282]},{34:[1,283]},{10:[1,284],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,285],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,60]),o($V_,$Va1),{11:[2,32],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},o($Vy,[2,58]),{8:$V1,9:286,14:$VY,17:110,18:111,26:112,45:43,60:$Vd,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{11:[2,28]},{39:[1,287]},{19:288,36:[1,289],43:$V7},{2:$Vv,4:290,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,47:[1,291],62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,292],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:293,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:294,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{36:[2,52]},{36:[2,53]},{36:[2,54]},{2:$Vv,4:295,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{32:$Vb1},{11:[1,296]},o($Vy,[2,59]),{34:[1,297],39:$VH,40:$VI,41:$VJ,42:$VK,46:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{31:298,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm},o($Vy,[2,37]),{2:$Vv,4:299,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,300],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,4:301,6:4,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,45]),o($Vd1,[2,48],{12:6,13:7,17:9,18:10,19:11,21:13,22:14,23:15,24:16,25:17,26:18,27:19,31:22,9:24,68:40,76:42,45:43,78:45,79:46,6:56,2:$Vv,7:$V0,8:$V1,14:$V2,20:$V3,28:$V4,29:$V5,38:$V6,43:$V7,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,75:$Vg,77:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu}),{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,302],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,303],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,55]),{11:[2,27]},{40:[1,304]},{2:$Vv,6:56,7:$V0,8:$V1,9:24,12:6,13:7,14:$V2,17:9,18:10,19:11,20:$V3,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V4,29:$V5,30:[1,305],31:22,38:$V6,43:$V7,45:43,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,68:40,75:$Vg,76:42,77:$Vh,78:45,79:46,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu},o($Vy,[2,43]),o($Vd1,[2,47],{12:6,13:7,17:9,18:10,19:11,21:13,22:14,23:15,24:16,25:17,26:18,27:19,31:22,9:24,68:40,76:42,45:43,78:45,79:46,6:56,2:$Vv,7:$V0,8:$V1,14:$V2,20:$V3,28:$V4,29:$V5,38:$V6,43:$V7,48:$V8,49:$V9,53:$Va,56:$Vb,58:$Vc,60:$Vd,61:$Ve,63:$Vf,75:$Vg,77:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,92:$Vt,93:$Vu}),o($Vy,[2,49]),o($Vy,[2,50]),{11:[2,29]},o($Vy,[2,38])],
defaultActions: {55:[2,1],58:[2,2],271:[2,28],279:[2,52],280:[2,53],281:[2,54],297:[2,27],304:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TRADUCTOR  = require('./tablaSimbolo/TRADUCTOR');
    const Excepcion = require('./exceptions/EXCEPTION');
    const PRIMITIVO = require('./expresiones/PRIMITIVO');
    const VARIABLE = require('./expresiones/VARIABLE');
    const IMPRIMIR  = require('./instrucciones/IMPRIMIR');
    const DECLARAR_VAR  = require('./instrucciones/VARIABLE');
    const TIPO = require('./tablaSimbolo/TIPO');
    const TIPO_INSTRUCCION = require('./tablaSimbolo/TIPO_INSTRUCCION');

    let Texto="";
    let TRADUCTOR1 = new TRADUCTOR.default([]);
    let TRADUCTOR2 = new TRADUCTOR.default([]);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:$$="";
break;
case 1:$$="";
break;
case 2:$$="";
break;
case 3:$$="";
break;
case 4:$$="";
break;
case 5:Texto=""; this.begin("CARACTER");
break;
case 6:yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1); this.popState(); return 87;
break;
case 7:yy_.yytext = '\n'; this.popState(); return 87;
break;
case 8:yy_.yytext = "\t"; this.popState(); return 87;
break;
case 9:yy_.yytext = "\r"; this.popState(); return 87;
break;
case 10:yy_.yytext = "\""; this.popState(); return 87;
break;
case 11:yy_.yytext = "'"; this.popState(); return 87;
break;
case 12:yy_.yytext = "\\"; this.popState(); return 87;
break;
case 13:this.popState(); return 'CARACTER_ERROR';
break;
case 14:Texto=""; this.begin("CADENA");
break;
case 15:Texto+=yy_.yytext;
break;
case 16:Texto+='\n';
break;
case 17:Texto+="\t";
break;
case 18:Texto+="\r";
break;
case 19:Texto+="\"";
break;
case 20:Texto+="\'";
break;
case 21:Texto+="\\";
break;
case 22:yy_.yytext = Texto; this.popState(); return 88;
break;
case 23:return "INMAS";
break;
case 24:return "INMENOS";
break;
case 25:return "MAS";
break;
case 26:return "MENOS";
break;
case 27:return "POR";
break;
case 28:return "DIV";
break;
case 29:return "MODULO";
break;
case 30:return "ELEVADO";
break;
case 31:return "AND";
break;
case 32:return "OR";
break;
case 33:return "NOT";
break;
case 34:return "DIFERENTE";
break;
case 35:return "IGUALDAD";
break;
case 36:return "MAYORQUEIGUAL";
break;
case 37:return "MENORQUEIGUAL"; 
break;
case 38:return "MENORQUEQUE";
break;
case 39:return "MAYORQUEQUE";
break;
case 40:return "IGUAL";
break;
case 41:return "INT";
break;
case 42:return "DOUBLE";
break;
case 43:return "BOOLEAN";
break;
case 44:return "CHAR";
break;
case 45:return "STRING";
break;
case 46:return "TRUE";
break;
case 47:return "FALSE";
break;
case 48:return "INTERROGACION";
break;
case 49:return "PRINT";
break;
case 50:return "IF";
break;
case 51:return "ELSE";
break;
case 52:return "FOR";
break;
case 53:return "WHILE";
break;
case 54:return "DO";
break;
case 55:return "SWITCH";
break;
case 56:return "NEW";
break;
case 57:return "RETURN";
break;
case 58:return "CONTINUE";
break;
case 59:return "BREAK";
break;
case 60:return "LIST";
break;
case 61:return "ADD";
break;
case 62:return "CASE";
break;
case 63:return "DEFAULT";
break;
case 64:return "VOID";
break;
case 65:return "TOLOWER";
break;
case 66:return "TOUPPER";
break;
case 67:return "LENGTH";
break;
case 68:return "TRUNCATE";
break;
case 69:return "ROUND";
break;
case 70:return "TYPEOF";
break;
case 71:return "TOSTRING";
break;
case 72:return "TOCHARARRAY";
break;
case 73:return "EXEC";
break;
case 74:return "PTCOMA";
break;
case 75:return "DOSPT"
break;
case 76:return "PT";
break;
case 77:return "COMA";
break;
case 78:return "PIZQ";
break;
case 79:return "PDER";
break;
case 80:return "CIZQ";
break;
case 81:return "CDER";
break;
case 82:return "LLIZQ";
break;
case 83:return "LLDER";
break;
case 84:return "NOMBRE";
break;
case 85:return "DECIMAL";
break;
case 86:return "ENTERO";
break;
case 87:return 5;
break;
case 88:
    console.log("");

break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:['])/i,/^(?:[^'\\]')/i,/^(?:\\n')/i,/^(?:\\t')/i,/^(?:\\r')/i,/^(?:\\"')/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:[^'\\]*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOLEAN\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:\?)/i,/^(?:PRINT\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:FOR\b)/i,/^(?:WHILE\b)/i,/^(?:DO\b)/i,/^(?:SWITCH\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:BREAK\b)/i,/^(?:LIST\b)/i,/^(?:ADD\b)/i,/^(?:CASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:VOID\b)/i,/^(?:toLOWER\b)/i,/^(?:toUPPER\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toSTRING\b)/i,/^(?:toCharArray\b)/i,/^(?:Exec\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[A-Za-z]([A-Za-z]|[0-9]|[_])*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CARACTER":{"rules":[6,7,8,9,10,11,12,13],"inclusive":false},"CADENA":{"rules":[15,16,17,18,19,20,21,22],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}